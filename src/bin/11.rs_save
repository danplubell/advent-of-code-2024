use std::cell::RefCell;
use std::rc::Rc;

advent_of_code::solution!(11);

enum StoneType {
    IsZero,
    IsEvenDigits,
    Multiply,
}
fn is_even_digits(n: i64) -> bool {
    n.abs().to_string().len() % 2 == 0
}
fn split_stone(n: i64) -> (i64, i64) {
    let abs_n = n.abs();
    let n_str = abs_n.to_string();
    let s = n_str.split_at(n_str.len() / 2);
    (s.0.parse::<i64>().unwrap(), s.1.parse::<i64>().unwrap())
}
pub fn part_one(input: &str) -> Option<usize> {
    let list: Vec<_> = input.lines().nth(0)?.split(" ").collect();
    let stones: Vec<i64> = list.iter().map(|s| s.parse::<i64>().unwrap()).collect();
    let mut stone_list: Vec<i64> = stones.clone();
    let mut working_list: Vec<i64> = vec![];
    (0..25).for_each(|i| {
        stone_list.iter().for_each(|n| {
            let stone_type: StoneType;
            if *n == 0 {
                stone_type = StoneType::IsZero;
            } else if is_even_digits(*n) {
                stone_type = StoneType::IsEvenDigits;
            } else {
                stone_type = StoneType::Multiply;
            }
            match stone_type {
                StoneType::IsZero => working_list.push(1),
                StoneType::IsEvenDigits => {
                    let result = split_stone(*n);
                    working_list.push(result.0);
                    working_list.push(result.1);
                }
                StoneType::Multiply => working_list.push(*n * 2024),
            }
        });
        stone_list = working_list.clone();
        working_list = vec![];
    });
    Some(stone_list.len())
}
use std::fmt::Display;


#[derive(Debug, PartialEq, Clone)]
pub struct List<T> {
    head: Link<T>,
}

type Link<T> = Option<Rc<RefCell<Node<T>>>>;

#[derive(Debug, PartialEq, Clone)]
struct Node<T> {
    elem: T,
    next: Link<T>,
}
impl<T> Node<T> {
    fn new(value: T) -> Self {
        Self {
            elem: value,
            next: None,
        }
    }
    fn set_elem(&mut self, elem: T) {
        self.elem = elem;
    }
    fn get_elem(&mut self) -> &T {
        &self.elem
    }
    fn get_next(&mut self) -> Link<T> {
        self.next.clone()
    }
    fn set_next(&mut self, new_next: Link<T>) {
        self.next = new_next;
    }
}

impl<T: std::fmt::Debug> List<T> {
    pub fn append(&mut self, elem: T) {
        let new_node = Rc::new(RefCell::new(Node::new(elem)));
        match self.head.as_ref() {
            None => {
                // If the list is empty, set the head to the new node
                self.head = Some(new_node);
            }
            Some(_) => {
                // Traverse to the end of the list and append the new node
                let mut current = self.head.clone();
                while let Some(node) = current {
                    let mut node_ref = node.borrow_mut(); // Borrow mutably
                    if node_ref.next.is_none() {
                        node_ref.next = Some(new_node); // Set the next node
                        break;
                    }
                    current = node_ref.next.clone(); // Move to the next node
                }
            }
        }
    }
    pub fn new() -> Self {
        List { head: None }
    }

    pub fn prepend(&self, elem: T) -> List<T> {
        List {
            head: Some(Rc::new(RefCell::new(Node {
                elem: elem,
                next: self.head.clone(),
            }))),
        }
    }

    pub fn tail(&self) -> List<T> {
        List {
            head: self.head.as_ref().and_then(|node| {
                let node_ref = node.borrow();
                node_ref.next.clone()
            }),
        }
    }
    pub fn head(&self) -> Option<T>
    where
        T: Clone,
    {
        self.head.as_ref().map(|node| {
            let node_ref = node.borrow();
            node_ref.elem.clone()
        })
    }
    pub fn count(&self) -> usize {
        let mut current = self.head.clone();
        let mut count: usize = 0;
        while let Some(node) = current {
            let mut node_ref = node.borrow_mut(); // Borrow mutably
            current = node_ref.next.clone(); // Move to the next node
            count += 1;
        }
        count
    }
    pub fn print_list(&self) {
        let mut current = self.head.clone();
        while let Some(node) = current {
            let mut node_ref = node.borrow_mut(); // Borrow mutably
            print!("{:?} ", node_ref.get_elem());
            current = node_ref.next.clone(); // Move to the next node
        }
        println!();
    }
}

pub fn part_two(input: &str) -> Option<usize> {
    let list: Vec<_> = input.lines().nth(0)?.split(" ").collect();
    let mut linked_list = List::new();
    list.iter().for_each(|n_str| {
        let n = n_str.parse::<i64>().unwrap();
        linked_list.append(n);
    });

    (0..25).for_each(|n| {
        let mut current = linked_list.head.clone();
        while let Some(node) = current {
            let stone_type: StoneType;
            let mut node_ref = &mut node.as_ref().borrow_mut();
            let n = node_ref.get_elem();
            if *n == 0 {
                stone_type = StoneType::IsZero;
            } else if is_even_digits(*n) {
                stone_type = StoneType::IsEvenDigits;
            } else {
                stone_type = StoneType::Multiply;
            }
            match stone_type {
                StoneType::IsZero => {
                   node_ref.set_elem(1);
                    current = node_ref.next.clone(); // Move to the next node

                }
                StoneType::IsEvenDigits => {
                    let result = split_stone(*n);
                    node_ref.set_elem(result.0);
                    
                    let mut new_node = Rc::new(RefCell::new(Node::new(result.1)));
                    new_node.as_ref().borrow_mut().set_next(node_ref.get_next());
                    node_ref.set_next(Some(new_node));
                    let n_node = node_ref.get_next(); // Move to the next node
                    match n_node {
                        Some(l) => {
                            let nl = l.as_ref().borrow_mut().get_next();
                            match nl {
                                Some(next_l) => {
                                    current = next_l.as_ref().borrow_mut().get_next();
                                }
                                None => {
                                    current = None
                                }
                            }
                        }
                        None=> {
                            current = None
                        }
                    }
                }
                StoneType::Multiply => {
                    let x = n * 2024;
                    node_ref.set_elem(x);
                    current = node_ref.next.clone(); // Move to the next node

                }
            }
            println!("while: {:?}", linked_list);
        }

    });

    //    linked_list.print_list();
    println!("list: {:?}", linked_list);
    let count = linked_list.count();
    Some(count)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part_one() {
        let result = part_one(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, Some(55312));
    }

    #[test]
    fn test_part_two() {
        let result = part_two(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, None);
    }

    #[test]
    fn basics() {
        let mut list = List::new();
        list.append(1);
        list.append(2);
        list.append(3);
        list.print_list();
    }
}
