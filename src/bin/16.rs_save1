advent_of_code::solution!(16);

use grid::Grid;
use priority_queue::DoublePriorityQueue;
use std::collections::{HashMap, HashSet};

#[derive(Debug, PartialEq, Copy, Clone, PartialOrd)]
enum Direction {
    Left,
    Right,
    Top,
    Bottom,
    NoDirection,
}

#[derive(Debug, Clone, Copy, PartialEq, Hash, Eq)]
struct Position {
    row: isize,
    col: isize,
}
#[derive(Debug, Clone, Copy, PartialEq, Hash, Eq)]
struct Visited {
    position: Position,
    dir: usize,
    blocked: bool,
}
#[derive(Debug, Clone, PartialEq, Default, Copy, Hash, Eq)]
struct Neighbors {
    top: Option<Position>,
    right: Option<Position>,
    bottom: Option<Position>,
    left: Option<Position>,
}

const NEIGHBOR_OFFSETS: [(i32, i32); 4] = [(-1, 0), (0, 1), (1, 0), (0, -1)];
const TOP: usize = 0;
const RIGHT: usize = 1;
const BOTTOM: usize = 2;
const LEFT: usize = 3;

fn calc_position(offset: (i32, i32), position: Position) -> Option<Position> {
    Option::from(Position {
        row: position.row.checked_add(offset.0 as isize)?,
        col: position.col.checked_add(offset.1 as isize)?,
    })
}

pub fn part_two(input: &str) -> Option<u32> {
    let grid_rows = input.lines().count();
    let grid_cols = input.lines().next().unwrap().len();
    let mut grid: Grid<char> = Grid::new(grid_rows, grid_cols);
    let mut start_location = Position { row: 0, col: 0 };
    let mut end_location = Position { row: 0, col: 0 };

    // put stuff in grid
    input.lines().enumerate().for_each(|(row, l)| {
        l.chars().enumerate().for_each(|(col, c)| {
            let g = grid.get_mut(row, col).unwrap();
            if c == 'S' {
                start_location = Position {
                    row: row as isize,
                    col: col as isize,
                }
            }
            if c == 'E' {
                end_location = Position {
                    row: row as isize,
                    col: col as isize,
                }
            }
            *g = c;
        })
    });
    let mut visited: HashMap<Position, Visited> = HashMap::new();
    let mut curr_pos = start_location;
    let mut curr_dir = TOP;
    let mut prev_pos = Position {
        row: 99999,
        col: 99999,
    };
    while (curr_pos != end_location) {
        (curr_pos, curr_dir) = next_move(&grid, curr_pos, curr_dir, &mut visited)?;
        println!("currPos, curr_dir {:?} {}", curr_pos, curr_dir);
        if curr_pos == prev_pos {
            break;
        }
        prev_pos = curr_pos;
    }
    visited.iter().for_each(|(pos, e)| println!("{:?}", e));
    None
}

fn next_move(
    grid: &Grid<char>,
    curr_pos: Position,
    curr_dir: usize,
    visited: &mut HashMap<Position, Visited>,
) -> Option<(Position, usize)> {
    get_new_pos(grid, &curr_pos, curr_dir, visited)
}

fn check_neighbor(grid: &Grid<char>, next_pos: Position) -> bool {
    let c = grid.get(next_pos.row, next_pos.col).unwrap();
    *c != '#'
}
/*
fn get_new_pos_save(grid: &Grid<char>, curr_pos: &Position, curr_dir: usize) -> (Position, usize) {
    // Define direction patterns for each current direction
    let directions = match curr_dir {
        RIGHT => [(TOP, TOP), (BOTTOM, BOTTOM), (LEFT, LEFT)],
        LEFT => [(TOP, TOP), (BOTTOM, BOTTOM), (RIGHT, RIGHT)],
        TOP => [(RIGHT, RIGHT), (LEFT, LEFT), (BOTTOM, BOTTOM)],
        BOTTOM => [(RIGHT, RIGHT), (LEFT, LEFT), (TOP, TOP)],
        _ => return (*curr_pos, curr_dir),
    };

    // Find the first valid neighbor
    directions
        .iter()
        .find_map(|&(check_dir, new_dir)| {
            check_neighbor(grid, *curr_pos, check_dir).map(|pos| (pos, new_dir))
        })
        .unwrap_or((*curr_pos, curr_dir))
}

 */
fn get_new_pos(
    grid: &Grid<char>,
    curr_pos: &Position,
    curr_dir: usize,
    visited: &mut HashMap<Position, Visited>,
) -> Option<(Position, usize)> {
    // check to see if we can move to the neighbor going the same direction

    let directions = match curr_dir {
        TOP => [TOP, LEFT, RIGHT, BOTTOM],
        RIGHT => [RIGHT, TOP, BOTTOM, LEFT],
        BOTTOM => [BOTTOM, RIGHT, LEFT, TOP],
        LEFT => [LEFT, TOP, BOTTOM, RIGHT],
        _ => unreachable!(),
    };

    let results = directions.iter().enumerate().find_map(|(idx, d)| {
        let next_pos = calc_position(NEIGHBOR_OFFSETS[*d], *curr_pos)?;
        let not_wall_or_outside = check_neighbor(grid, next_pos);
        let pos_visit = visited.entry(next_pos).or_insert(Visited {
            position: *curr_pos,
            dir: curr_dir,
            blocked: false,
        });
//todo        should keep track of directions array, how to handle a direction that is already visited
        if not_wall_or_outside && !pos_visit.blocked {
            return Some((next_pos, d, idx));
        }
        None
    });
    if let Some(r) = results {
        // is it going out the way it came in?
        let next_p = r.0;
        let next_d = r.1;
        if r.2 == 3 {
            visited.entry(*curr_pos).and_modify(|v| {
                v.blocked = true; 
            });
        }
        return Some((next_p, *next_d));
    }
    None

    // was it the last index, if so then the direction is reversed
    // mark as blocked

    /*
    directions.iter().enumerate().for_each(|(idx, d)|{
        let next_pos = calc_position(NEIGHBOR_OFFSETS[curr_dir], *curr_pos);
        let not_wall_or_outside = check_neighbor(grid, next_pos);
        let pos_visit = visited.entry(*curr_pos).or_insert(Visited {
            position: *curr_pos,
            dir: curr_dir,
            blocked: false,
        });
        if not_wall_or_outside && !pos_visit.blocked {
            return Some((next_pos, curr_dir));
        }
    });

     */
    /*match curr_dir {

        RIGHT => {
            let same_direction = check_neighbor(grid, *curr_pos, curr_dir);
            if same_direction.is_some() {
                return (same_direction.unwrap(), curr_dir);
            }
            //Top
            let tp = check_neighbor(grid, *curr_pos, TOP);
            //Bottom
            let bp = check_neighbor(grid, *curr_pos, BOTTOM);
            //Left
            let lp = check_neighbor(grid, *curr_pos, LEFT);

            if tp.is_some() {
                return (tp.unwrap(), TOP);
            }
            if bp.is_some() {
                return (bp.unwrap(), BOTTOM);
            }
            if lp.is_some() {
                return (lp.unwrap(), LEFT);
            }
            (*curr_pos, curr_dir)
        }
        LEFT => {
            let same_direction = check_neighbor(grid, *curr_pos, curr_dir);
            if same_direction.is_some() {
                return (same_direction.unwrap(), curr_dir);
            }
            //Top
            let tp = check_neighbor(&grid, *curr_pos, TOP);
            //Bottom
            let bp = check_neighbor(&grid, *curr_pos, BOTTOM);
            //right
            let rp = check_neighbor(&grid, *curr_pos, RIGHT);
            if tp.is_some() {
                return (tp.unwrap(), TOP);
            }
            if bp.is_some() {
                return (bp.unwrap(), BOTTOM);
            }
            if rp.is_some() {
                return (rp.unwrap(), RIGHT);
            }
            (*curr_pos, curr_dir)
        }
        TOP => {
            let same_direction = check_neighbor(grid, *curr_pos, curr_dir);
            if same_direction.is_some() {
                return (same_direction.unwrap(), curr_dir);
            }
            //Top
            let rp = check_neighbor(&grid, *curr_pos, RIGHT);
            //Bottom
            let bp = check_neighbor(&grid, *curr_pos, BOTTOM);
            //Left
            let lp = check_neighbor(&grid, *curr_pos, LEFT);
            if rp.is_some() {
                return (rp.unwrap(), RIGHT);
            }
            if lp.is_some() {
                return (lp.unwrap(), LEFT);
            }
            if bp.is_some() {
                return (bp.unwrap(), BOTTOM);
            }
            (*curr_pos, curr_dir)
        }
        BOTTOM => {
            let same_direction = check_neighbor(grid, *curr_pos, curr_dir);
            if same_direction.is_some() {
                return (same_direction.unwrap(), curr_dir);
            }

            //Top
            let tp = check_neighbor(&grid, *curr_pos, TOP);
            //Bottom
            let rp = check_neighbor(&grid, *curr_pos, RIGHT);
            //Left
            let lp = check_neighbor(&grid, *curr_pos, LEFT);
            if rp.is_some() {
                return (rp.unwrap(), RIGHT);
            }
            if lp.is_some() {
                return (lp.unwrap(), LEFT);
            }
            if tp.is_some() {
                return (tp.unwrap(), TOP);
            }
            (*curr_pos, curr_dir)
        }
        _ => (*curr_pos, curr_dir),
    }

         */
}

fn is_not_wall_or_out_move(grid: &Grid<char>, position: &Option<Position>) -> bool {
    match position {
        Some(p) => {
            let c = grid.get(p.row, p.col);
            !matches!(c, Some('#'))
        }
        _ => false,
    }
}

//int cost, int r, int c, int dr, int dc
#[derive(Hash, Debug, Clone, Copy, PartialEq, Eq)]
struct QueueEntry {
    cost: Cost,
    location_entry: LocationEntry,
}
#[derive(Hash, Debug, Clone, Copy, PartialEq, Eq)]
struct LocationEntry {
    position: Position,
    d_position: Position,
}
type Cost = isize;

pub fn part_one(input: &str) -> Option<u32> {
    let mut pq: DoublePriorityQueue<QueueEntry, Cost> = DoublePriorityQueue::new();
    let mut seen: HashSet<LocationEntry> = HashSet::new();

    let grid_rows = input.lines().count();
    let grid_cols = input.lines().next().unwrap().len();
    let mut grid: Grid<char> = Grid::new(grid_rows, grid_cols);
    let mut start_location = Position { row: 0, col: 0 };
    let mut end_location = Position { row: 0, col: 0 };
    // put stuff in grid
    input.lines().enumerate().for_each(|(row, l)| {
        if l.starts_with("#") {
            l.chars().enumerate().for_each(|(col, c)| {
                let g = grid.get_mut(row, col).unwrap();
                if c == 'S' {
                    start_location = Position {
                        row: row as isize,
                        col: col as isize,
                    }
                }
                if c == 'E' {
                    end_location = Position {
                        row: row as isize,
                        col: col as isize,
                    }
                }
                *g = c;
            })
        }
    });
    let start_location_entry = LocationEntry {
        position: start_location,
        d_position: Position { row: 0, col: 1 },
    };
    let start_entry = QueueEntry {
        cost: 0,
        location_entry: start_location_entry,
    };
    pq.push(start_entry, 0);
    seen.insert(start_location_entry);
    let mut total_cost: isize = 0;
    while !pq.is_empty() {
        let (entry, cost) = pq.peek_min().unwrap();
        let c = grid
            .get(
                entry.location_entry.position.row,
                entry.location_entry.position.col,
            )
            .unwrap();
        let queue_entry: Option<(QueueEntry, Cost)> = pq.pop_min();
        if let Some((entry, cost)) = queue_entry {
            if *c == 'E' {
                total_cost = cost;
                println!("length: {}", pq.len());
                break;
            }
            // create moves
            let moves: Vec<QueueEntry> = vec![
                QueueEntry {
                    cost: cost + 1,
                    location_entry: LocationEntry {
                        position: Position {
                            row: entry.location_entry.position.row
                                + entry.location_entry.d_position.row,
                            col: entry.location_entry.position.col
                                + entry.location_entry.d_position.col,
                        },
                        d_position: Position {
                            row: entry.location_entry.d_position.row,
                            col: entry.location_entry.d_position.col,
                        },
                    },
                },
                QueueEntry {
                    cost: cost + 1000,
                    location_entry: LocationEntry {
                        position: Position {
                            row: entry.location_entry.position.row,
                            col: entry.location_entry.position.col,
                        },
                        d_position: Position {
                            row: entry.location_entry.d_position.col,
                            col: -entry.location_entry.d_position.row,
                        },
                    },
                },
                QueueEntry {
                    cost: cost + 1000,
                    location_entry: LocationEntry {
                        position: Position {
                            row: entry.location_entry.position.row,
                            col: entry.location_entry.position.col,
                        },
                        d_position: Position {
                            row: -entry.location_entry.d_position.col,
                            col: entry.location_entry.d_position.row,
                        },
                    },
                },
            ];
            moves.iter().for_each(|e| {
                // skip out-of-bounds or blocked cells
                let c = grid.get(e.location_entry.position.row, e.location_entry.position.col);
                if let Some(c) = c {
                    if *c != '#' {
                        let a = seen.insert(e.location_entry);
                        if a {
                            let new_entry = QueueEntry {
                                cost: e.cost,
                                location_entry: e.location_entry,
                            };
                            pq.push(new_entry, e.cost);
                        }
                    }
                }
            })
        }
    }
    println!("seen: {:?}", seen.len());
    Some(total_cost as u32)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part_one() {
        let result = part_one(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, Some(9846));
    }

    #[test]
    fn test_part_two() {
        let result = part_two(&advent_of_code::template::read_file("examples", DAY));
        assert_eq!(result, None);
    }
}
